name: Build and Test IRSSG Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    name: Generate Python version configurations
    runs-on: ubuntu-latest
    outputs:
      python-versions-cibw: ${{ steps.config.outputs.python-versions-cibw }}
      python-versions-test: ${{ steps.config.outputs.python-versions-test }}
    steps:
      - name: Generate configurations
        id: config
        run: |
          # 支持的Python版本
          SOURCE_VERSIONS="3.9 3.10 3.11"
          echo "Source Python versions: $SOURCE_VERSIONS"
          
          # 生成 cibuildwheel 格式: "cp39-* cp310-* cp311-*"
          CIBW_VERSIONS=""
          for version in $SOURCE_VERSIONS; do
            major_minor=$(echo $version | tr -d '.')
            CIBW_VERSIONS="$CIBW_VERSIONS cp${major_minor}-*"
          done
          CIBW_VERSIONS=$(echo $CIBW_VERSIONS | sed 's/^ *//')
          echo "python-versions-cibw=$CIBW_VERSIONS" >> $GITHUB_OUTPUT
          
          # 生成测试矩阵格式: ["3.9", "3.10", "3.11"]
          TEST_VERSIONS=$(echo "$SOURCE_VERSIONS" | sed 's/ /", "/g' | sed 's/^/["/' | sed 's/$/"]/')
          echo "python-versions-test=$TEST_VERSIONS" >> $GITHUB_OUTPUT
          
          echo "Generated configurations:"
          echo "  CIBW: $CIBW_VERSIONS"
          echo "  Test: $TEST_VERSIONS"

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            cibw_archs: x86_64
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest  
            cibw_archs: arm64
            
          # Windows AMD64
          - os: windows-latest
            cibw_archs: AMD64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # macOS: 安装 Homebrew 依赖
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install gcc openblas arpack
          # 确保gfortran在PATH中
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH
          # 设置编译器环境变量
          echo "FC=$(brew --prefix)/bin/gfortran" >> $GITHUB_ENV
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
      
      # Windows: 设置 Visual Studio
      - name: Set up MSVC (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
          output-dir: wheelhouse
        env:
          # Python版本配置
          CIBW_BUILD: ${{ needs.setup.outputs.python-versions-cibw }}
          
          # 平台特定的架构配置
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs }}  
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs }}
          
          # 构建详细度配置
          CIBW_BUILD_VERBOSITY: "3"
          
          # macOS部署目标配置
          CIBW_ENVIRONMENT_MACOS: ${{ matrix.cibw_archs == 'arm64' && 'MACOSX_DEPLOYMENT_TARGET=14.0' || '' }}
          
          # Linux: 在manylinux镜像中安装依赖
          CIBW_BEFORE_BUILD_LINUX: |
            set -e
            echo "📦 Installing dependencies in manylinux environment..."
            
            # 安装运行时依赖和数学库
            yum install -y rdma-core-devel || echo "Warning: Could not install RDMA dependencies"
            yum install -y openblas-devel lapack-devel || echo "Warning: Could not install math libraries"
            
            # 修复 libgfortran 版本不匹配问题
            echo "🔧 Installing compatible gfortran runtime libraries..."
            yum install -y gcc-gfortran libgfortran || echo "Warning: Could not install gfortran runtime"
            
            # 创建 libgfortran.so.3 到 libgfortran.so.5 的兼容链接
            if [ -f /usr/lib64/libgfortran.so.5 ] && [ ! -f /usr/lib64/libgfortran.so.3 ]; then
              echo "Creating libgfortran.so.3 compatibility link..."
              ln -sf libgfortran.so.5 /usr/lib64/libgfortran.so.3
            fi
            
            # 验证数学库安装
            echo "🔍 Installed math libraries:"
            ls -la /usr/lib64/libopenblas* || echo "OpenBLAS not found"
            ls -la /usr/lib64/libblas* || echo "BLAS not found"
            ls -la /usr/lib64/liblapack* || echo "LAPACK not found"
            ls -la /usr/lib64/libgfortran* || echo "gfortran runtime not found"
            
            echo "✅ Dependencies installed successfully"
          
          # macOS: 设置编译器标志
          CIBW_BEFORE_BUILD_MACOS: |
            echo "🔧 Setting up macOS build environment..."
            export FFLAGS="-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch"
            export CFLAGS="-arch arm64"
            export CXXFLAGS="-arch arm64"
            export LDFLAGS="-arch arm64 -L$(brew --prefix)/lib -Wl,-rpath,$(brew --prefix)/lib"
            echo "✅ macOS environment configured"
          
          # Windows: 设置编译器标志
          CIBW_BEFORE_BUILD_WINDOWS: |
            echo "🔧 Setting up Windows build environment..."
            echo "✅ Windows environment configured"
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}
          path: ./wheelhouse/*.whl

  test_linux:
    name: Test Linux wheel (Python ${{ matrix.python-version }})
    needs: [setup, build_wheels]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions-test) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./wheels
        continue-on-error: true
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel
        run: |
          echo "🔍 Available wheels:"
          ls -la ./wheels/ || echo "No wheels found"
          
          # 根据Python版本选择对应的轮子
          python_short=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "🎯 Looking for wheel matching Python version: $python_short"
          
          target_wheel=$(ls ./wheels/*${python_short}*linux*.whl 2>/dev/null | head -1)
          
          if [ -n "$target_wheel" ] && [ -f "$target_wheel" ]; then
            echo "✅ Found matching Linux wheel: $target_wheel"
            pip install "$target_wheel" -q
            echo "📊 Installed wheel info:"
            pip show irssg
          else
            echo "❌ No Linux wheel found for Python $python_short"
            echo "Available wheels:"
            ls -la ./wheels/ || echo "No wheels directory"
            exit 1
          fi

      - name: Test irssg functionality (Linux)
        run: |
          echo "=== Linux功能测试 ==="
          
          # 测试基本命令
          irssg --version
          irssg --help
          
          # 测试验证命令
          irssg --validate
          
          # 进入测试目录并运行
          cd examples/test_irssg
          ls -la  # 显示可用文件
          
          # 测试完整执行
          timeout 30s irssg irssg.in || echo "irssg command completed (may have timed out or finished)"
          
          echo "✅ All Linux tests passed"

  test_macos:
    name: Test macOS ARM64 wheel (Python ${{ matrix.python-version }})
    needs: [setup, build_wheels]
    runs-on: macos-latest
    if: always()
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions-test) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download macOS ARM64 wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-macos-latest-arm64
          path: ./wheels
        continue-on-error: true
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel (ARM64)
        run: |
          echo "🔍 Available wheels:"
          ls -la ./wheels/ || echo "No wheels found"
          
          # 根据Python版本选择对应的轮子
          python_short=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "🎯 Looking for wheel matching Python version: $python_short"
          
          target_wheel=$(ls ./wheels/*${python_short}*arm64.whl 2>/dev/null | head -1)
          
          if [ -n "$target_wheel" ] && [ -f "$target_wheel" ]; then
            echo "✅ Found matching ARM64 wheel: $target_wheel"
            pip install "$target_wheel" -q
            echo "📊 Installed wheel info:"
            pip show irssg
          else
            echo "❌ No ARM64 wheel found for Python $python_short"
            echo "Available wheels:"
            ls -la ./wheels/ || echo "No wheels directory"
            exit 1
          fi

      - name: Test irssg functionality (macOS ARM64)
        run: |
          echo "=== macOS ARM64功能测试 ==="
          
          # 测试基本命令
          irssg --version
          irssg --help
          
          # 测试验证命令
          irssg --validate
          
          # 进入测试目录并运行
          cd examples/test_irssg
          ls -la  # 显示可用文件
          
          # 测试完整执行
          timeout 30s irssg irssg.in || echo "irssg command completed (may have timed out or finished)"
          
          echo "✅ All macOS ARM64 tests passed"

  test_windows:
    name: Test Windows wheel (Python ${{ matrix.python-version }})
    needs: [setup, build_wheels]
    runs-on: windows-latest
    if: always()
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions-test) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Windows wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-windows-latest-AMD64
          path: ./wheels
        continue-on-error: true
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel
        shell: pwsh
        run: |
          Write-Host "🔍 Available wheels:"
          Get-ChildItem -Path "./wheels" -Recurse | Format-Table Name, Length
          
          # 根据Python版本选择对应的轮子
          $pythonVersion = python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')"
          Write-Host "🎯 Looking for wheel matching Python version: $pythonVersion"
          
          $targetWheel = Get-ChildItem -Path "./wheels" -Filter "*$pythonVersion*win*.whl" | Select-Object -First 1
          
          if ($targetWheel) {
            Write-Host "✅ Found matching Windows wheel: $($targetWheel.Name)"
            pip install "$($targetWheel.FullName)" -q
            Write-Host "📊 Installed wheel info:"
            pip show irssg
          } else {
            Write-Host "❌ No Windows wheel found for Python $pythonVersion"
            Write-Host "Available wheels:"
            Get-ChildItem -Path "./wheels" -Recurse | Format-Table Name, Length
            exit 1
          }
      
      - name: Test irssg functionality (Windows)
        shell: pwsh
        run: |
          Write-Host "=== Windows功能测试 ==="
          
          # 测试基本命令
          irssg --version
          irssg --help
          
          # 测试验证命令
          irssg --validate
          
          # 进入测试目录并运行
          cd examples/test_irssg
          Get-ChildItem  # 显示可用文件
          
          # 测试完整执行
          Start-Process -FilePath "irssg" -ArgumentList "irssg.in" -Wait -NoNewWindow -TimeoutSec 30 -ErrorAction SilentlyContinue
          
          Write-Host "✅ All Windows tests passed"

  collect_wheels:
    name: Collect all wheels
    needs: [setup, build_wheels, test_linux, test_macos, test_windows]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List all built wheels
        run: |
          echo "🎉 成功构建的wheels:"
          ls -la dist/
          echo ""
          echo "📊 构建统计:"
          echo "Total wheels: $(ls dist/*.whl | wc -l)"
          echo "Linux wheels: $(ls dist/*linux*.whl | wc -l)"
          echo "macOS wheels: $(ls dist/*macos*.whl | wc -l)"
          echo "Windows wheels: $(ls dist/*win*.whl | wc -l)"
      
      - name: Upload all wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: dist/*.whl

