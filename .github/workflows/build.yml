name: Build and Test IRSSG Cross-Platform Wheels

# ╔══════════════════════════════════════════════════════════════════════════════╗
# ║                             🛠️  开发者配置区域                                    ║
# ║                         Developer Configuration                              ║
# ╚══════════════════════════════════════════════════════════════════════════════╝
# 
# 🐍 支持的Python版本 (修改此处以更改构建的Python版本)
# 格式: {major}.{minor} (例如: 3.9 = Python 3.9.x, 3.10 = Python 3.10.x)
# 
# 📝 使用说明:
# - 要构建特定版本: 修改 PYTHON_VERSIONS_SOURCE
# - 要跳过某版本: 从列表中删除对应条目
# - 要添加新版本: 在列表中添加 {版本号}
# 
# 💡 示例:
# - 只构建 3.9-3.11: "3.9 3.10 3.11"
# - 只构建 3.10: "3.10"
# - 构建所有: "3.9 3.10 3.11 3.12 3.13"
# 
env:
  # 🎯 Python版本配置 - 只需要在这里修改一次！
  PYTHON_VERSIONS_SOURCE: "3.9 3.10 3.11"  # 主版本列表，空格分隔
  
  # 其他构建配置
  BUILD_VERBOSITY: "3"                    # 构建详细度 (0-3, 推荐3用于调试)
  MACOS_DEPLOYMENT_TARGET: "15.0"         # macOS最低版本要求 (支持Apple Silicon)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    name: Generate Python version configurations
    runs-on: ubuntu-latest
    outputs:
      python-versions-cibw: ${{ steps.config.outputs.python-versions-cibw }}
      python-versions-test: ${{ steps.config.outputs.python-versions-test }}
    steps:
      - name: Generate configurations
        id: config
        run: |
          # 从环境变量读取源版本列表
          SOURCE_VERSIONS="${{ env.PYTHON_VERSIONS_SOURCE }}"
          echo "Source Python versions: $SOURCE_VERSIONS"
          
          # 生成 cibuildwheel 格式: "cp39-* cp310-* cp311-*"
          CIBW_VERSIONS=""
          for version in $SOURCE_VERSIONS; do
            major_minor=$(echo $version | tr -d '.')
            CIBW_VERSIONS="$CIBW_VERSIONS cp${major_minor}-*"
          done
          CIBW_VERSIONS=$(echo $CIBW_VERSIONS | sed 's/^ *//')
          echo "python-versions-cibw=$CIBW_VERSIONS" >> $GITHUB_OUTPUT
          
          # 生成测试矩阵格式: ["3.9", "3.10", "3.11"]
          TEST_VERSIONS=$(echo "$SOURCE_VERSIONS" | sed 's/ /", "/g' | sed 's/^/["/' | sed 's/$/"]/')
          echo "python-versions-test=$TEST_VERSIONS" >> $GITHUB_OUTPUT
          
          echo "Generated configurations:"
          echo "  CIBW: $CIBW_VERSIONS"
          echo "  Test: $TEST_VERSIONS"

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            cibw_archs: x86_64
            
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest  
            cibw_archs: arm64
            
          # Windows AMD64
          - os: windows-latest
            cibw_archs: AMD64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # macOS: 安装 Homebrew 依赖
      # macOS依赖现在在CIBW_BEFORE_BUILD_MACOS中处理
      # 删除旧的macOS依赖安装步骤，避免与OpenBLAS策略冲突
      
      # Windows: 安装 MSYS2 和 UCRT64 工具链
      - name: Install MSYS2 (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Installing MSYS2 on Windows..."
          # 下载并安装 MSYS2
          powershell -Command "Invoke-WebRequest 'https://github.com/msys2/msys2-installer/releases/download/2024-01-13/msys2-x86_64-20240113.exe' -OutFile msys2-installer.exe"
          start /wait msys2-installer.exe --accept-messages --accept-licenses --confirm-command
          del msys2-installer.exe
          
          # 设置 MSYS2 环境
          echo "C:\msys64\usr\bin" >> $GITHUB_PATH
          echo "C:\msys64\ucrt64\bin" >> $GITHUB_PATH
          
          # 安装必要的包
          C:\msys64\usr\bin\pacman.exe -Syu --noconfirm
          C:\msys64\usr\bin\pacman.exe -S --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-lapack
          
          # 验证安装
          echo "Verifying MSYS2 installation..."
          C:\msys64\ucrt64\bin\gfortran.exe --version
          C:\msys64\ucrt64\bin\gcc.exe --version
      

      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
          output-dir: wheelhouse
        env:
          # 🐍 Python版本配置 (使用动态生成的版本)
          CIBW_BUILD: ${{ needs.setup.outputs.python-versions-cibw }}
          
          # 平台特定的架构配置
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs }}
          CIBW_ARCHS_MACOS: ${{ matrix.cibw_archs }}  
          CIBW_ARCHS_WINDOWS: ${{ matrix.cibw_archs }}
          
          # 构建详细度配置
          CIBW_BUILD_VERBOSITY: ${{ env.BUILD_VERBOSITY }}
          
          # macOS部署目标配置 (使用顶部env中定义的版本)
          CIBW_ENVIRONMENT_MACOS: ${{ matrix.cibw_archs == 'arm64' && format('MACOSX_DEPLOYMENT_TARGET={0}', env.MACOS_DEPLOYMENT_TARGET) || '' }}
          
          # Linux: 在manylinux镜像中安装依赖
          CIBW_BEFORE_BUILD_LINUX: |
            set -e
            echo "📦 Installing dependencies in manylinux environment..."
            
            # 安装运行时依赖和数学库
            yum install -y rdma-core-devel || echo "Warning: Could not install RDMA dependencies"
            yum install -y lapack-devel || echo "Warning: Could not install LAPACK"
            
            # 修复 libgfortran 版本不匹配问题
            echo "🔧 Installing compatible gfortran runtime libraries..."
            yum install -y gcc-gfortran libgfortran || echo "Warning: Could not install gfortran runtime"
            
            # 创建 libgfortran.so.3 到 libgfortran.so.5 的兼容链接
            if [ -f /usr/lib64/libgfortran.so.5 ] && [ ! -f /usr/lib64/libgfortran.so.3 ]; then
              echo "Creating libgfortran.so.3 compatibility link..."
              ln -sf libgfortran.so.5 /usr/lib64/libgfortran.so.3
            fi
            
            # 设置库路径环境变量
            export LD_LIBRARY_PATH="/usr/lib64:/usr/local/lib64:$LD_LIBRARY_PATH"
            export PKG_CONFIG_PATH="/usr/lib64/pkgconfig:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH"
            
            # 验证数学库安装
            echo "🔍 Installed math libraries:"
            ls -la /usr/lib64/liblapack* || echo "LAPACK not found"
            ls -la /usr/lib64/libgfortran* || echo "gfortran runtime not found"
            
            # 验证LAPACK函数可用性
            echo "🔍 Verifying LAPACK functions..."
            if [ -f /usr/lib64/liblapack.so ]; then
              echo "✅ LAPACK library found"
              nm -D /usr/lib64/liblapack.so | grep -i zheev || echo "⚠️  zheev function not found in LAPACK"
            else
              echo "❌ LAPACK library not found"
            fi
            
            # 确保pkg-config能找到库
            echo "🔧 Setting up pkg-config..."
            
            if [ -f /usr/lib64/pkgconfig/lapack.pc ]; then
              echo "✅ LAPACK pkg-config file found"
            else
              echo "⚠️  LAPACK pkg-config file not found, creating one..."
              cat > /usr/lib64/pkgconfig/lapack.pc << EOF
            prefix=/usr
            libdir=/usr/lib64
            includedir=/usr/include
            
            Name: LAPACK
            Description: LAPACK is a library of linear algebra routines
            Version: 3.9.0
            Libs: -L\${libdir} -llapack
            Cflags: -I\${includedir}
            Requires: blas
            EOF
            fi
            

            
            echo "✅ Dependencies installed successfully"
          
          # macOS: 安装依赖并设置编译器 (简化版本，只用LAPACK)
          CIBW_BEFORE_BUILD_MACOS: |
            set -e  # 遇到错误立即退出，便于调试
            echo "📦 Installing dependencies for macOS builds..."
            echo "🔍 Script started at: $(date)"
            echo "🔍 Current working directory: $(pwd)"
            echo "🔍 Current user: $(whoami)"
            echo "🔍 Current PATH: $PATH"
            
            # 步骤1: 更新Homebrew
            echo "Step 1: Updating Homebrew..."
            # brew update || { echo "❌ Homebrew update failed"; exit 1; }
            
            # 步骤2: 安装依赖 (简化版本，只用必要的包)
            echo "Step 2: Installing dependencies (simplified)..."
            echo "Installing: gcc lapack (only essential packages)"
            brew install gcc lapack || { echo "❌ Dependencies installation failed"; exit 1; }
            
            # 确保gfortran在PATH中
            echo "$(brew --prefix)/bin" >> $GITHUB_PATH
            export PATH="$(brew --prefix)/bin:$PATH"
            
            # 创建gfortran软链接（解决版本化gfortran问题）
            echo "🔧 Creating gfortran symlink..."
            if [ ! -L "$(brew --prefix)/bin/gfortran" ]; then
              # 找到最新的gfortran版本
              latest_gfortran=$(ls -1 $(brew --prefix)/bin/gfortran-* | sort -V | tail -1)
              if [ -n "$latest_gfortran" ]; then
                echo "Creating symlink: gfortran -> $(basename $latest_gfortran)"
                ln -sf $(basename $latest_gfortran) $(brew --prefix)/bin/gfortran
              else
                echo "❌ No gfortran versions found"
                exit 1
              fi
            else
              echo "✅ gfortran symlink already exists"
            fi
            
            echo "🔍 PATH after update: $PATH"
            echo "🔍 GITHUB_PATH content:"
            cat $GITHUB_PATH || echo "GITHUB_PATH not accessible"
            
            echo "✅ Dependencies installed successfully (simplified)"
            
            # 步骤3: 设置编译器环境变量
            echo "Step 3: Setting compiler environment variables..."
            
            # 验证gfortran是否可用 (wanniertools style)
            echo "🔍 Verifying gfortran installation (wanniertools style)..."
            
            # 简单验证gfortran (像wanniertools一样)
            which gfortran || { echo "❌ gfortran not found in PATH"; exit 1; }
            gfortran --version || { echo "❌ gfortran version check failed"; exit 1; }
            echo "✅ gfortran found: $(which gfortran)"
            
            export FC=$(brew --prefix)/bin/gfortran
            export CC=clang
            export CXX=clang++
            export FFLAGS="-fallow-invalid-boz -fbackslash -ffree-line-length-none -fallow-argument-mismatch"
            echo "✅ Compiler variables set: FC=$FC, CC=$CC, CXX=$CXX"
            
            # 步骤4: 设置LAPACK路径
            echo "Step 4: Setting LAPACK paths..."
            export LDFLAGS="-L$(brew --prefix)/opt/lapack/lib"
            export CPPFLAGS="-I$(brew --prefix)/opt/lapack/include"
            export PKG_CONFIG_PATH="$(brew --prefix)/opt/lapack/lib/pkgconfig:$PKG_CONFIG_PATH"
            echo "✅ LAPACK paths set: LDFLAGS=$LDFLAGS, CPPFLAGS=$CPPFLAGS"
            
            # 步骤5: 设置架构标志
            echo "Step 5: Setting architecture flags..."
            if [ "$(uname -m)" = "arm64" ]; then
              echo "🎯 Building for ARM64 (Apple Silicon)"
              export CFLAGS="-arch arm64"
              export CXXFLAGS="-arch arm64"
              export LDFLAGS="$LDFLAGS -arch arm64 -Wl,-rpath,$(brew --prefix)/opt/lapack/lib"
              export ARCHFLAGS="-arch arm64"
            else
              echo "🎯 Building for x86_64 (Intel)"
              export CFLAGS="-arch x86_64"
              export CXXFLAGS="-arch x86_64"
              export LDFLAGS="$LDFLAGS -arch x86_64 -Wl,-rpath,$(brew --prefix)/opt/lapack/lib"
              export ARCHFLAGS="-arch x86_64"
            fi
            echo "✅ Architecture flags set: CFLAGS=$CFLAGS, CXXFLAGS=$CXXFLAGS"
            
            # 步骤6: 验证安装
            echo "Step 6: Verifying installation..."
            echo "🔍 Checking LAPACK library files..."
            ls -la $(brew --prefix)/opt/lapack/lib/ || { echo "❌ LAPACK lib directory not found"; exit 1; }
            ls -la $(brew --prefix)/opt/lapack/include/ || { echo "❌ LAPACK include directory not found"; exit 1; }
            
            echo "🔍 Checking pkg-config LAPACK detection..."
            pkg-config --exists lapack || { echo "❌ pkg-config cannot find LAPACK"; exit 1; }
            pkg-config --modversion lapack || echo "⚠️ Could not get LAPACK version"
            pkg-config --variable=libdir lapack || echo "⚠️ Could not get LAPACK libdir"
            
            # 步骤7: 设置cibuildwheel环境变量
            echo "Step 7: Setting cibuildwheel environment variables..."
            export CIBW_ENVIRONMENT_MACOS="LDFLAGS=$LDFLAGS CPPFLAGS=$CPPFLAGS PKG_CONFIG_PATH=$PKG_CONFIG_PATH MACOSX_DEPLOYMENT_TARGET=${{ env.MACOS_DEPLOYMENT_TARGET }}"
            echo "✅ CIBW environment variables set: $CIBW_ENVIRONMENT_MACOS"
            
            # 步骤8: 最终验证
            echo "Step 8: Final verification..."
            echo "📋 Final environment summary:"
            echo "  PATH: $PATH"
            echo "  FC: $FC"
            echo "  CC: $CC"
            echo "  CXX: $CXX"
            echo "  LDFLAGS: $LDFLAGS"
            echo "  CPPFLAGS: $CPPFLAGS"
            echo "  PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
            echo "  CIBW_ENVIRONMENT_MACOS: $CIBW_ENVIRONMENT_MACOS"
            
            # 最终验证gfortran
            echo "🔍 Final gfortran verification:"
            which gfortran
            gfortran --version
            echo "✅ macOS build environment configured successfully!"
            echo "🔍 Final environment check:"
            echo "  MACOSX_DEPLOYMENT_TARGET: $MACOSX_DEPLOYMENT_TARGET"
            echo "  CIBW_ENVIRONMENT_MACOS: $CIBW_ENVIRONMENT_MACOS"
          
          # Windows: 设置MSVC环境
          CIBW_BEFORE_BUILD_WINDOWS: |
            echo "📦 Setting up MSVC environment for Windows builds..."
            
            # 设置编译器环境变量
            export CC=cl
            export CXX=cl
            export FC=cl
            
            # 设置Fortran编译标志
            export FFLAGS="/fpp /std:legacy"
            
            echo "✅ Windows MSVC environment configured"
          
          # macOS: 使用delocate修复wheel
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            echo "🔧 Repairing macOS wheel..."
            
            # 检查delocate是否可用
            if command -v delocate-wheel >/dev/null 2>&1; then
              echo "✅ delocate found, using it to repair wheel"
            else
              echo "⚠️ delocate not found, trying to install it"
              pip install delocate
            fi
            
            # 用delocate修复wheel
            delocate-wheel -w {dest_dir} {wheel}
            
            echo "✅ macOS wheel repaired with delocate"
          

      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}
          path: ./wheelhouse/*.whl

  test_linux:
    name: Test Linux wheel (Python ${{ matrix.python-version }})
    needs: [setup, build_wheels]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions-test) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./wheels
        continue-on-error: true
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel
        run: |
          echo "🔍 Available wheels:"
          ls -la ./wheels/ || echo "No wheels found"
          
          # 根据Python版本选择对应的轮子
          python_short=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "🎯 Looking for wheel matching Python version: $python_short"
          
          target_wheel=$(ls ./wheels/*${python_short}*linux*.whl 2>/dev/null | head -1)
          
          if [ -n "$target_wheel" ] && [ -f "$target_wheel" ]; then
            echo "✅ Found matching Linux wheel: $target_wheel"
            pip install "$target_wheel" -q
            echo "📊 Installed wheel info:"
            pip show irssg
          else
            echo "❌ No Linux wheel found for Python $python_short"
            echo "Available wheels:"
            ls -la ./wheels/ || echo "No wheels directory"
            exit 1
          fi

      - name: Test irssg functionality (Linux)
        run: |
          echo "=== Linux功能测试 ==="
          cd examples/test_irssg
          ls -la  # 显示可用文件
          
          # 测试基本命令
          irssg --version
          irssg --help
          
          # 测试验证命令
          irssg --validate
          
          # 进入测试目录并运行

          
          # 测试完整执行
          timeout 30s irssg irssg.in || echo "irssg command completed (may have timed out or finished)"
          
          echo "✅ All Linux tests passed"



  collect_wheels:
    name: Collect all wheels
    needs: [setup, build_wheels, test_linux]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List all built wheels
        run: |
          echo "🎉 成功构建的wheels:"
          ls -la dist/
          echo ""
          echo "📊 构建统计:"
          echo "Total wheels: $(ls dist/*.whl | wc -l)"
          echo "Linux wheels: $(ls dist/*linux*.whl | wc -l)"
          echo "macOS wheels: $(ls dist/*macos*.whl | wc -l)"
          echo "Windows wheels: $(ls dist/*win*.whl | wc -l)"
      
      - name: Upload all wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: dist/*.whl

