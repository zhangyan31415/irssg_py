name: Build and Test IRSSG Package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    name: Generate Python version configurations
    runs-on: ubuntu-latest
    outputs:
      python-versions-cibw: ${{ steps.config.outputs.python-versions-cibw }}
      python-versions-test: ${{ steps.config.outputs.python-versions-test }}
    steps:
      - name: Generate configurations
        id: config
        run: |
          # 只支持Python 3.9
          SOURCE_VERSIONS="3.9"
          echo "Source Python versions: $SOURCE_VERSIONS"
          
          # 生成 cibuildwheel 格式: "cp39-*"
          CIBW_VERSIONS="cp39-*"
          echo "python-versions-cibw=$CIBW_VERSIONS" >> $GITHUB_OUTPUT
          
          # 生成测试矩阵格式: ["3.9"]
          TEST_VERSIONS='["3.9"]'
          echo "python-versions-test=$TEST_VERSIONS" >> $GITHUB_OUTPUT
          
          echo "Generated configurations:"
          echo "  CIBW: $CIBW_VERSIONS"
          echo "  Test: $TEST_VERSIONS"

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix:
        include:
          # 只构建Linux x86_64
          - os: ubuntu-latest
            cibw_archs: x86_64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      

      
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        with:
          output-dir: wheelhouse
        env:
          # Python版本配置
          CIBW_BUILD: ${{ needs.setup.outputs.python-versions-cibw }}
          
          # 平台特定的架构配置
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs }}
          
          # 构建详细度配置
          CIBW_BUILD_VERBOSITY: "3"
          
          # Linux: 在manylinux镜像中安装依赖
          CIBW_BEFORE_BUILD_LINUX: |
            set -e
            echo "📦 Installing dependencies in manylinux environment..."
            
            # 安装运行时依赖和数学库
            yum install -y rdma-core-devel || echo "Warning: Could not install RDMA dependencies"
            yum install -y lapack-devel || echo "Warning: Could not install LAPACK"
            
            # 修复 libgfortran 版本不匹配问题
            echo "🔧 Installing compatible gfortran runtime libraries..."
            yum install -y gcc-gfortran libgfortran || echo "Warning: Could not install gfortran runtime"
            
            # 创建 libgfortran.so.3 到 libgfortran.so.5 的兼容链接
            if [ -f /usr/lib64/libgfortran.so.5 ] && [ ! -f /usr/lib64/libgfortran.so.3 ]; then
              echo "Creating libgfortran.so.3 compatibility link..."
              ln -sf libgfortran.so.5 /usr/lib64/libgfortran.so.3
            fi
            
            # 设置库路径环境变量
            export LD_LIBRARY_PATH="/usr/lib64:/usr/local/lib64:$LD_LIBRARY_PATH"
            export PKG_CONFIG_PATH="/usr/lib64/pkgconfig:/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH"
            
            # 验证数学库安装
            echo "🔍 Installed math libraries:"
            ls -la /usr/lib64/libopenblas* || echo "OpenBLAS not found"
            ls -la /usr/lib64/libblas* || echo "BLAS not found"
            ls -la /usr/lib64/liblapack* || echo "LAPACK not found"
            ls -la /usr/lib64/libgfortran* || echo "gfortran runtime not found"
            
            # 验证LAPACK函数可用性
            echo "🔍 Verifying LAPACK functions..."
            if [ -f /usr/lib64/liblapack.so ]; then
              echo "✅ LAPACK library found"
              nm -D /usr/lib64/liblapack.so | grep -i zheev || echo "⚠️  zheev function not found in LAPACK"
            else
              echo "❌ LAPACK library not found"
            fi
            
            # 检查OpenBLAS是否包含LAPACK
            if [ -f /usr/lib64/libopenblas.so ]; then
              echo "🔍 Checking OpenBLAS for LAPACK functions..."
              nm -D /usr/lib64/libopenblas.so | grep -i zheev || echo "⚠️  zheev function not found in OpenBLAS"
            fi
            
            # 确保pkg-config能找到库
            echo "🔧 Setting up pkg-config..."
            if [ -f /usr/lib64/pkgconfig/openblas.pc ]; then
              echo "✅ OpenBLAS pkg-config file found"
            else
              echo "⚠️  OpenBLAS pkg-config file not found, creating one..."
              mkdir -p /usr/lib64/pkgconfig
              cat > /usr/lib64/pkgconfig/openblas.pc << EOF
            prefix=/usr
            libdir=/usr/lib64
            includedir=/usr/include
            
            Name: OpenBLAS
            Description: OpenBLAS is an optimized BLAS library
            Version: 0.3.0
            Libs: -L\${libdir} -lopenblas
            Cflags: -I\${includedir}
            EOF
            fi
            
            if [ -f /usr/lib64/pkgconfig/lapack.pc ]; then
              echo "✅ LAPACK pkg-config file found"
            else
              echo "⚠️  LAPACK pkg-config file not found, creating one..."
              cat > /usr/lib64/pkgconfig/lapack.pc << EOF
            prefix=/usr
            libdir=/usr/lib64
            includedir=/usr/include
            
            Name: LAPACK
            Description: LAPACK is a library of linear algebra routines
            Version: 3.9.0
            Libs: -L\${libdir} -llapack
            Cflags: -I\${includedir}
            Requires: blas
            EOF
            fi
            
            if [ -f /usr/lib64/pkgconfig/blas.pc ]; then
              echo "✅ BLAS pkg-config file found"
            else
              echo "⚠️  BLAS pkg-config file not found, creating one..."
              cat > /usr/lib64/pkgconfig/blas.pc << EOF
            prefix=/usr
            libdir=/usr/lib64
            includedir=/usr/include
            
            Name: BLAS
            Description: Basic Linear Algebra Subprograms
            Version: 3.9.0
            Libs: -L\${libdir} -lblas
            Cflags: -I\${includedir}
            EOF
            fi
            
            echo "✅ Dependencies installed successfully"
          

      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./wheelhouse/*.whl

  test_linux:
    name: Test Linux wheel (Python ${{ matrix.python-version }})
    needs: [setup, build_wheels]
    runs-on: ubuntu-latest
    if: always()
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions-test) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Linux wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-ubuntu-latest-x86_64
          path: ./wheels
        continue-on-error: true
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install wheel
        run: |
          echo "🔍 Available wheels:"
          ls -la ./wheels/ || echo "No wheels found"
          
          # 根据Python版本选择对应的轮子
          python_short=$(python -c "import sys; print(f'cp{sys.version_info.major}{sys.version_info.minor}')")
          echo "🎯 Looking for wheel matching Python version: $python_short"
          
          target_wheel=$(ls ./wheels/*${python_short}*linux*.whl 2>/dev/null | head -1)
          
          if [ -n "$target_wheel" ] && [ -f "$target_wheel" ]; then
            echo "✅ Found matching Linux wheel: $target_wheel"
            pip install "$target_wheel" -q
            echo "📊 Installed wheel info:"
            pip show irssg
          else
            echo "❌ No Linux wheel found for Python $python_short"
            echo "Available wheels:"
            ls -la ./wheels/ || echo "No wheels directory"
            exit 1
          fi

      - name: Test irssg functionality (Linux)
        run: |
          echo "=== Linux功能测试 ==="
          cd examples/test_irssg
          ls -la  # 显示可用文件
          
          # 测试基本命令
          irssg --version
          irssg --help
          
          # 测试验证命令
          irssg --validate
          
          # 进入测试目录并运行

          
          # 测试完整执行
          timeout 30s irssg irssg.in || echo "irssg command completed (may have timed out or finished)"
          
          echo "✅ All Linux tests passed"



  collect_wheels:
    name: Collect all wheels
    needs: [setup, build_wheels, test_linux]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      
      - name: List all built wheels
        run: |
          echo "🎉 成功构建的wheels:"
          ls -la dist/
          echo ""
          echo "📊 构建统计:"
          echo "Total wheels: $(ls dist/*.whl | wc -l)"
          echo "Linux wheels: $(ls dist/*linux*.whl | wc -l)"
          echo "macOS wheels: $(ls dist/*macos*.whl | wc -l)"
          echo "Windows wheels: $(ls dist/*win*.whl | wc -l)"
      
      - name: Upload all wheels
        uses: actions/upload-artifact@v4
        with:
          name: all-wheels
          path: dist/*.whl

